{"version":3,"sources":["components/NavBar/bball.svg","components/NavBar/index.jsx","components/ContentCard/index.jsx","components/Globalstyle/globalStyles.js","components/Themes/theme.js","App.jsx","registerServiceWorker.js","index.jsx"],"names":["module","exports","NavBar","props","Navbar","variant","currentTheme","text","expand","style","backgroundColor","contentColor","Row","Col","Brand","color","href","alt","src","ReactLogo","width","height","className","Toggle","aria-controls","Collapse","id","Nav","Link","target","size","float","Switch","onChange","toggleTheme","inputProps","ContentCard","useState","error","setError","playerError","setPlayerError","selectedPlayer","setSelectedPlayer","isLoaded","setIsLoaded","rookies","setRookies","defenseProbability","setDefenseProbability","thumbnail","setThumbnail","useEffect","fetch","then","res","json","result","classes","makeStyles","theme","inputRoot","borderColor","fontFamily","useStyles","message","Container","fluid","Card","borderRadius","Body","Title","Autocomplete","event","newSelectedRookie","imageLink","name","playerPrediction","getPlayerPrediction","options","renderInput","params","TextField","Image","rounded","justifyContent","lineWidth","progress","progressColor","bgColor","textColor","textStyle","font","roundedStroke","GlobalStyles","createGlobalStyle","body","lightTheme","toggleBorder","background","darkTheme","App","setTheme","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","ReactDOM","render","BrowserRouter","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.164279dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bball.72eb6632.svg\";","import React from \"react\";\r\nimport {Navbar, Nav, Row, Col } from 'react-bootstrap'\r\nimport Switch from '@material-ui/core/Switch';\r\nimport ReactLogo from \"./bball.svg\"\r\nimport { GoMarkGithub } from \"react-icons/go\";\r\n\r\n/**\r\n * Components that renders the navbar \r\n * @param {props} any contains method to toggle themes and properties to change navbar color/text\r\n * @return JSX Fragment that defines the structure of the navbar\r\n */\r\nconst NavBar = (props) => {\r\n  return (\r\n    <Navbar variant={props.currentTheme.text === \"#363537\" ? \"light\" : \"dark\"} expand=\"lg\" style={{backgroundColor: props.currentTheme.contentColor}}>\r\n      <Row>\r\n        <Col>\r\n      <Navbar.Brand style={{color: props.currentTheme.text}} href=\"#home\">\r\n        <img\r\n          alt=\"\"\r\n          src={ReactLogo}\r\n          width=\"30\"\r\n          height=\"30\"\r\n          className=\"logo d-inline-block align-top\"\r\n        />{' '}\r\n        All Defensive Team Classifier\r\n      </Navbar.Brand>\r\n      </Col>\r\n      </Row>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" /> \r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link variant=\"dark\" href=\"https://github.com/AmanRiat1/nba_all_defense_classifier\" target=\"_blank\">\r\n            <GoMarkGithub size={24} className=\"mr-sm-2\" style={{float: \"left\"}}/> Github\r\n          </Nav.Link>\r\n        </Nav>\r\n        <Row>\r\n          <Col>Light<Switch onChange={props.toggleTheme} inputProps={{ 'aria-label': 'primary checkbox' }}/>Dark</Col>\r\n        </Row>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\nexport default NavBar;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {Card, Image} from 'react-bootstrap'\r\nimport {Col, Row, Container } from 'react-bootstrap'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Circle from 'react-circle';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { BsQuestionCircle } from 'react-icons/bs';\r\n\r\n/**\r\n * Components that renders the main card pertaining information to the player's probability of making an all defense team\r\n * @param {props} any contains properties to change card color/text\r\n * @return JSX Fragment that defines the structure of the card displaying content\r\n */\r\nconst ContentCard = (props) => {\r\n  const [error, setError] = useState(null);\r\n  const [playerError, setPlayerError] = useState(\"\")\r\n  const [selectedPlayer, setSelectedPlayer] = useState(\"\");\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [rookies, setRookies] = useState([]);\r\n  const [defenseProbability, setDefenseProbability] =  useState();\r\n  const [thumbnail, setThumbnail] = useState(\"0\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:3001/rookies\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setRookies(result.rookies);\r\n        },\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [])\r\n\r\n  const getPlayerImage = (name) => {\r\n    fetch(`http://localhost:3001/player-image/${name}`)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setThumbnail(result.imageLink);\r\n          \r\n        },\r\n        (error) => {\r\n          setThumbnail(\"0\");\r\n        }\r\n      )\r\n  }\r\n\r\n  const getPlayerPrediction = (name) =>{\r\n    fetch(`http://localhost:3001/predict/${name}`)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setDefenseProbability(result.playerPrediction);\r\n          setPlayerError(0);\r\n        },\r\n        (error) => {\r\n          setPlayerError(1);\r\n          setDefenseProbability(\"0\");\r\n        }\r\n      )\r\n\r\n  }\r\n\r\n  const useStyles = makeStyles(theme => ({\r\n    inputRoot: {\r\n      color: props.currentTheme.text,\r\n      \"&  .MuiOutlinedInput-notchedOutline\": {\r\n        borderColor: props.currentTheme.text\r\n      },\r\n      fontFamily: \"Consolas\",\r\n      \".MuiAutocomplete-listbox\": {\r\n        fontFamily: \"Consolas\",\r\n      }\r\n    }\r\n  }));\r\n  \r\n  const classes = useStyles();\r\n\r\n  const displayPlayerMessage = () =>{\r\n    if (selectedPlayer === \"\" || selectedPlayer === null){\r\n      return \"\";\r\n    }else if (playerError === 1){\r\n      return `Sorry we couldn't gather enough information on ${selectedPlayer}`;\r\n    }else{\r\n      return `${selectedPlayer} has a ${defenseProbability}% chance of making an all defensive team`;\r\n    }\r\n  }\r\n\r\n  const getPlayerIcon = () =>{\r\n    if (thumbnail === \"0\"){\r\n      return <BsQuestionCircle size={180}/>;\r\n    }else{\r\n      return (<Image src={thumbnail} style = {{\"border\": '1px solid black'}} rounded />);\r\n    }\r\n  }\r\n  \r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return(\r\n      <Container fluid>\r\n        <Card style={{ borderRadius: '15px', backgroundColor: props.currentTheme.contentColor}}>\r\n        <Card.Body className=\"text-center\">\r\n          <Card.Title>Select a 2019-20 NBA Rookie</Card.Title> \r\n          <br></br>\r\n          <Autocomplete\r\n            classes={classes}\r\n            onChange={(event, newSelectedRookie) => {\r\n              setSelectedPlayer(newSelectedRookie);\r\n              getPlayerImage(newSelectedRookie);\r\n              getPlayerPrediction(newSelectedRookie);\r\n            }}\r\n            id=\"combo-box-demo\"\r\n            options={rookies}\r\n            renderInput={(params) => <TextField {...params} variant=\"outlined\" />}\r\n          />\r\n          <br></br>\r\n          <Row>\r\n            <Col>{getPlayerIcon()}</Col>\r\n            <Col >\r\n              <div style={{justifyContent: \"center\"}}>\r\n                <Circle\r\n                  lineWidth={32} \r\n                  size={190}\r\n                  progress={defenseProbability} \r\n                  progressColor=\"maroon\"  \r\n                  bgColor=\"moccasin\" \r\n                  textColor={props.currentTheme.text}\r\n                  textStyle={{ \r\n                    font: 'bold 5rem Oswald , Arial, sans-serif' \r\n                  }}\r\n                  roundedStroke={true} \r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <br></br>\r\n          <Row style={{justifyContent:\"center\", fontFamily: \"Consolas\"}}>{displayPlayerMessage()}</Row>\r\n        </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContentCard;","import { createGlobalStyle} from \"styled-components\"\r\nconst GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    font-family: Oswald, sans-serif;\r\n  }\r\n  `\r\n\r\nexport default GlobalStyles;","export const lightTheme = {\r\n    body: \"linear-gradient(to bottom, #2BC0E4, #EAECC6)\",\r\n    text: '#363537',\r\n    toggleBorder: '#FFF',\r\n    background: '#363537',\r\n    contentColor: '#FFF',\r\n}\r\nexport const darkTheme = {\r\n    body: 'linear-gradient(to bottom, #661884, #794a99)',\r\n    text: '#FAFAFA',\r\n    toggleBorder: '#6B8096',\r\n    background: '#999',\r\n    contentColor: '#292929',\r\n}","import React, { useState} from 'react';\r\nimport \"./App.css\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport ContentCard from \"./components/ContentCard\";\r\nimport GlobalStyles from \"./components/Globalstyle/globalStyles.js\";\r\nimport { lightTheme, darkTheme } from \"./components/Themes/theme.js\"\r\nimport {ThemeProvider} from \"styled-components\";\r\n\r\nconst App = () => {\r\n  const [theme, setTheme] = useState(lightTheme);\r\n  const themeToggler = () => {\r\n    theme === lightTheme ? setTheme(darkTheme) : setTheme(lightTheme)\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n    <>\r\n    <GlobalStyles/>\r\n    <div>\r\n      <div><NavBar toggleTheme={themeToggler} currentTheme={theme}/></div>\r\n      <main className=\"container center\">\r\n        <ContentCard currentTheme={theme}/>\r\n      </main>\r\n    </div>\r\n    </>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n/**  \r\n * Be aware that the website will only update to the latest version on the 2nd page visit if it as already cached \r\n * Learn more about service workers in React: https://create-react-app.dev/docs/making-a-progressive-web-app\r\n */\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}